/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type WhitelistUser = {
  whitelist: Address;
  user: Address;
  bump: number;
  reserved: ReadonlyUint8Array;
};

export type WhitelistUserArgs = WhitelistUser;

export function getWhitelistUserEncoder(): Encoder<WhitelistUserArgs> {
  return getStructEncoder([
    ['whitelist', getAddressEncoder()],
    ['user', getAddressEncoder()],
    ['bump', getU8Encoder()],
    ['reserved', fixEncoderSize(getBytesEncoder(), 263)],
  ]);
}

export function getWhitelistUserDecoder(): Decoder<WhitelistUser> {
  return getStructDecoder([
    ['whitelist', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 263)],
  ]);
}

export function getWhitelistUserCodec(): Codec<
  WhitelistUserArgs,
  WhitelistUser
> {
  return combineCodec(getWhitelistUserEncoder(), getWhitelistUserDecoder());
}

export function decodeWhitelistUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WhitelistUser, TAddress>;
export function decodeWhitelistUser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WhitelistUser, TAddress>;
export function decodeWhitelistUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WhitelistUser, TAddress> | MaybeAccount<WhitelistUser, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWhitelistUserDecoder()
  );
}

export async function fetchWhitelistUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WhitelistUser, TAddress>> {
  const maybeAccount = await fetchMaybeWhitelistUser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWhitelistUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WhitelistUser, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWhitelistUser(maybeAccount);
}

export async function fetchAllWhitelistUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WhitelistUser>[]> {
  const maybeAccounts = await fetchAllMaybeWhitelistUser(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWhitelistUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WhitelistUser>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWhitelistUser(maybeAccount));
}

export function getWhitelistUserSize(): number {
  return 328;
}
