/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/kit';
import { JITO_VAULT_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BURN_WITHDRAWAL_TICKET_DISCRIMINATOR = 7;

export function getBurnWithdrawalTicketDiscriminatorBytes() {
  return getU8Encoder().encode(BURN_WITHDRAWAL_TICKET_DISCRIMINATOR);
}

export type BurnWithdrawalTicketInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountVaultConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultTokenAccount extends string | IAccountMeta<string> = string,
  TAccountVrtMint extends string | IAccountMeta<string> = string,
  TAccountStaker extends string | IAccountMeta<string> = string,
  TAccountStakerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountVaultStakerWithdrawalTicket extends
    | string
    | IAccountMeta<string> = string,
  TAccountVaultStakerWithdrawalTicketTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountVaultFeeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramFeeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountWhitelistUser extends string | IAccountMeta<string> = string,
  TAccountJitoVaultProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVaultConfig extends string
        ? ReadonlyAccount<TAccountVaultConfig>
        : TAccountVaultConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultTokenAccount extends string
        ? WritableAccount<TAccountVaultTokenAccount>
        : TAccountVaultTokenAccount,
      TAccountVrtMint extends string
        ? WritableAccount<TAccountVrtMint>
        : TAccountVrtMint,
      TAccountStaker extends string
        ? WritableAccount<TAccountStaker>
        : TAccountStaker,
      TAccountStakerTokenAccount extends string
        ? WritableAccount<TAccountStakerTokenAccount>
        : TAccountStakerTokenAccount,
      TAccountVaultStakerWithdrawalTicket extends string
        ? WritableAccount<TAccountVaultStakerWithdrawalTicket>
        : TAccountVaultStakerWithdrawalTicket,
      TAccountVaultStakerWithdrawalTicketTokenAccount extends string
        ? WritableAccount<TAccountVaultStakerWithdrawalTicketTokenAccount>
        : TAccountVaultStakerWithdrawalTicketTokenAccount,
      TAccountVaultFeeTokenAccount extends string
        ? WritableAccount<TAccountVaultFeeTokenAccount>
        : TAccountVaultFeeTokenAccount,
      TAccountProgramFeeTokenAccount extends string
        ? WritableAccount<TAccountProgramFeeTokenAccount>
        : TAccountProgramFeeTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountWhitelistUser extends string
        ? ReadonlyAccount<TAccountWhitelistUser>
        : TAccountWhitelistUser,
      TAccountJitoVaultProgram extends string
        ? ReadonlyAccount<TAccountJitoVaultProgram>
        : TAccountJitoVaultProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BurnWithdrawalTicketInstructionData = { discriminator: number };

export type BurnWithdrawalTicketInstructionDataArgs = {};

export function getBurnWithdrawalTicketInstructionDataEncoder(): Encoder<BurnWithdrawalTicketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: BURN_WITHDRAWAL_TICKET_DISCRIMINATOR,
    })
  );
}

export function getBurnWithdrawalTicketInstructionDataDecoder(): Decoder<BurnWithdrawalTicketInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getBurnWithdrawalTicketInstructionDataCodec(): Codec<
  BurnWithdrawalTicketInstructionDataArgs,
  BurnWithdrawalTicketInstructionData
> {
  return combineCodec(
    getBurnWithdrawalTicketInstructionDataEncoder(),
    getBurnWithdrawalTicketInstructionDataDecoder()
  );
}

export type BurnWithdrawalTicketInput<
  TAccountVaultConfig extends string = string,
  TAccountVault extends string = string,
  TAccountVaultTokenAccount extends string = string,
  TAccountVrtMint extends string = string,
  TAccountStaker extends string = string,
  TAccountStakerTokenAccount extends string = string,
  TAccountVaultStakerWithdrawalTicket extends string = string,
  TAccountVaultStakerWithdrawalTicketTokenAccount extends string = string,
  TAccountVaultFeeTokenAccount extends string = string,
  TAccountProgramFeeTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountConfig extends string = string,
  TAccountWhitelist extends string = string,
  TAccountWhitelistUser extends string = string,
  TAccountJitoVaultProgram extends string = string,
> = {
  vaultConfig: Address<TAccountVaultConfig>;
  vault: Address<TAccountVault>;
  vaultTokenAccount: Address<TAccountVaultTokenAccount>;
  vrtMint: Address<TAccountVrtMint>;
  staker: Address<TAccountStaker>;
  stakerTokenAccount: Address<TAccountStakerTokenAccount>;
  vaultStakerWithdrawalTicket: Address<TAccountVaultStakerWithdrawalTicket>;
  vaultStakerWithdrawalTicketTokenAccount: Address<TAccountVaultStakerWithdrawalTicketTokenAccount>;
  vaultFeeTokenAccount: Address<TAccountVaultFeeTokenAccount>;
  programFeeTokenAccount: Address<TAccountProgramFeeTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: Address<TAccountConfig>;
  whitelist: Address<TAccountWhitelist>;
  whitelistUser: Address<TAccountWhitelistUser>;
  jitoVaultProgram: Address<TAccountJitoVaultProgram>;
};

export function getBurnWithdrawalTicketInstruction<
  TAccountVaultConfig extends string,
  TAccountVault extends string,
  TAccountVaultTokenAccount extends string,
  TAccountVrtMint extends string,
  TAccountStaker extends string,
  TAccountStakerTokenAccount extends string,
  TAccountVaultStakerWithdrawalTicket extends string,
  TAccountVaultStakerWithdrawalTicketTokenAccount extends string,
  TAccountVaultFeeTokenAccount extends string,
  TAccountProgramFeeTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountConfig extends string,
  TAccountWhitelist extends string,
  TAccountWhitelistUser extends string,
  TAccountJitoVaultProgram extends string,
  TProgramAddress extends Address = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
>(
  input: BurnWithdrawalTicketInput<
    TAccountVaultConfig,
    TAccountVault,
    TAccountVaultTokenAccount,
    TAccountVrtMint,
    TAccountStaker,
    TAccountStakerTokenAccount,
    TAccountVaultStakerWithdrawalTicket,
    TAccountVaultStakerWithdrawalTicketTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountProgramFeeTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountConfig,
    TAccountWhitelist,
    TAccountWhitelistUser,
    TAccountJitoVaultProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BurnWithdrawalTicketInstruction<
  TProgramAddress,
  TAccountVaultConfig,
  TAccountVault,
  TAccountVaultTokenAccount,
  TAccountVrtMint,
  TAccountStaker,
  TAccountStakerTokenAccount,
  TAccountVaultStakerWithdrawalTicket,
  TAccountVaultStakerWithdrawalTicketTokenAccount,
  TAccountVaultFeeTokenAccount,
  TAccountProgramFeeTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountConfig,
  TAccountWhitelist,
  TAccountWhitelistUser,
  TAccountJitoVaultProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_VAULT_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vaultConfig: { value: input.vaultConfig ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultTokenAccount: {
      value: input.vaultTokenAccount ?? null,
      isWritable: true,
    },
    vrtMint: { value: input.vrtMint ?? null, isWritable: true },
    staker: { value: input.staker ?? null, isWritable: true },
    stakerTokenAccount: {
      value: input.stakerTokenAccount ?? null,
      isWritable: true,
    },
    vaultStakerWithdrawalTicket: {
      value: input.vaultStakerWithdrawalTicket ?? null,
      isWritable: true,
    },
    vaultStakerWithdrawalTicketTokenAccount: {
      value: input.vaultStakerWithdrawalTicketTokenAccount ?? null,
      isWritable: true,
    },
    vaultFeeTokenAccount: {
      value: input.vaultFeeTokenAccount ?? null,
      isWritable: true,
    },
    programFeeTokenAccount: {
      value: input.programFeeTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    whitelistUser: { value: input.whitelistUser ?? null, isWritable: false },
    jitoVaultProgram: {
      value: input.jitoVaultProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vaultConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultTokenAccount),
      getAccountMeta(accounts.vrtMint),
      getAccountMeta(accounts.staker),
      getAccountMeta(accounts.stakerTokenAccount),
      getAccountMeta(accounts.vaultStakerWithdrawalTicket),
      getAccountMeta(accounts.vaultStakerWithdrawalTicketTokenAccount),
      getAccountMeta(accounts.vaultFeeTokenAccount),
      getAccountMeta(accounts.programFeeTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.whitelistUser),
      getAccountMeta(accounts.jitoVaultProgram),
    ],
    programAddress,
    data: getBurnWithdrawalTicketInstructionDataEncoder().encode({}),
  } as BurnWithdrawalTicketInstruction<
    TProgramAddress,
    TAccountVaultConfig,
    TAccountVault,
    TAccountVaultTokenAccount,
    TAccountVrtMint,
    TAccountStaker,
    TAccountStakerTokenAccount,
    TAccountVaultStakerWithdrawalTicket,
    TAccountVaultStakerWithdrawalTicketTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountProgramFeeTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountConfig,
    TAccountWhitelist,
    TAccountWhitelistUser,
    TAccountJitoVaultProgram
  >;

  return instruction;
}

export type ParsedBurnWithdrawalTicketInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vaultConfig: TAccountMetas[0];
    vault: TAccountMetas[1];
    vaultTokenAccount: TAccountMetas[2];
    vrtMint: TAccountMetas[3];
    staker: TAccountMetas[4];
    stakerTokenAccount: TAccountMetas[5];
    vaultStakerWithdrawalTicket: TAccountMetas[6];
    vaultStakerWithdrawalTicketTokenAccount: TAccountMetas[7];
    vaultFeeTokenAccount: TAccountMetas[8];
    programFeeTokenAccount: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    config: TAccountMetas[12];
    whitelist: TAccountMetas[13];
    whitelistUser: TAccountMetas[14];
    jitoVaultProgram: TAccountMetas[15];
  };
  data: BurnWithdrawalTicketInstructionData;
};

export function parseBurnWithdrawalTicketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBurnWithdrawalTicketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vaultConfig: getNextAccount(),
      vault: getNextAccount(),
      vaultTokenAccount: getNextAccount(),
      vrtMint: getNextAccount(),
      staker: getNextAccount(),
      stakerTokenAccount: getNextAccount(),
      vaultStakerWithdrawalTicket: getNextAccount(),
      vaultStakerWithdrawalTicketTokenAccount: getNextAccount(),
      vaultFeeTokenAccount: getNextAccount(),
      programFeeTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      config: getNextAccount(),
      whitelist: getNextAccount(),
      whitelistUser: getNextAccount(),
      jitoVaultProgram: getNextAccount(),
    },
    data: getBurnWithdrawalTicketInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
