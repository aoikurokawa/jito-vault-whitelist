/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { JITO_VAULT_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_MINT_BURN_ADMIN_DISCRIMINATOR = 2;

export function getSetMintBurnAdminDiscriminatorBytes() {
  return getU8Encoder().encode(SET_MINT_BURN_ADMIN_DISCRIMINATOR);
}

export type SetMintBurnAdminInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVaultConfig extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultAdmin extends string | IAccountMeta<string> = string,
  TAccountJitoVaultProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVaultConfig extends string
        ? ReadonlyAccount<TAccountVaultConfig>
        : TAccountVaultConfig,
      TAccountWhitelist extends string
        ? ReadonlyAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultAdmin extends string
        ? ReadonlySignerAccount<TAccountVaultAdmin> &
            IAccountSignerMeta<TAccountVaultAdmin>
        : TAccountVaultAdmin,
      TAccountJitoVaultProgram extends string
        ? ReadonlyAccount<TAccountJitoVaultProgram>
        : TAccountJitoVaultProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetMintBurnAdminInstructionData = { discriminator: number };

export type SetMintBurnAdminInstructionDataArgs = {};

export function getSetMintBurnAdminInstructionDataEncoder(): Encoder<SetMintBurnAdminInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SET_MINT_BURN_ADMIN_DISCRIMINATOR })
  );
}

export function getSetMintBurnAdminInstructionDataDecoder(): Decoder<SetMintBurnAdminInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSetMintBurnAdminInstructionDataCodec(): Codec<
  SetMintBurnAdminInstructionDataArgs,
  SetMintBurnAdminInstructionData
> {
  return combineCodec(
    getSetMintBurnAdminInstructionDataEncoder(),
    getSetMintBurnAdminInstructionDataDecoder()
  );
}

export type SetMintBurnAdminInput<
  TAccountConfig extends string = string,
  TAccountVaultConfig extends string = string,
  TAccountWhitelist extends string = string,
  TAccountVault extends string = string,
  TAccountVaultAdmin extends string = string,
  TAccountJitoVaultProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  vaultConfig: Address<TAccountVaultConfig>;
  whitelist: Address<TAccountWhitelist>;
  vault: Address<TAccountVault>;
  vaultAdmin: TransactionSigner<TAccountVaultAdmin>;
  jitoVaultProgram: Address<TAccountJitoVaultProgram>;
};

export function getSetMintBurnAdminInstruction<
  TAccountConfig extends string,
  TAccountVaultConfig extends string,
  TAccountWhitelist extends string,
  TAccountVault extends string,
  TAccountVaultAdmin extends string,
  TAccountJitoVaultProgram extends string,
  TProgramAddress extends Address = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
>(
  input: SetMintBurnAdminInput<
    TAccountConfig,
    TAccountVaultConfig,
    TAccountWhitelist,
    TAccountVault,
    TAccountVaultAdmin,
    TAccountJitoVaultProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetMintBurnAdminInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountVaultConfig,
  TAccountWhitelist,
  TAccountVault,
  TAccountVaultAdmin,
  TAccountJitoVaultProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_VAULT_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    vaultConfig: { value: input.vaultConfig ?? null, isWritable: false },
    whitelist: { value: input.whitelist ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultAdmin: { value: input.vaultAdmin ?? null, isWritable: false },
    jitoVaultProgram: {
      value: input.jitoVaultProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vaultConfig),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultAdmin),
      getAccountMeta(accounts.jitoVaultProgram),
    ],
    programAddress,
    data: getSetMintBurnAdminInstructionDataEncoder().encode({}),
  } as SetMintBurnAdminInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountVaultConfig,
    TAccountWhitelist,
    TAccountVault,
    TAccountVaultAdmin,
    TAccountJitoVaultProgram
  >;

  return instruction;
}

export type ParsedSetMintBurnAdminInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vaultConfig: TAccountMetas[1];
    whitelist: TAccountMetas[2];
    vault: TAccountMetas[3];
    vaultAdmin: TAccountMetas[4];
    jitoVaultProgram: TAccountMetas[5];
  };
  data: SetMintBurnAdminInstructionData;
};

export function parseSetMintBurnAdminInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetMintBurnAdminInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vaultConfig: getNextAccount(),
      whitelist: getNextAccount(),
      vault: getNextAccount(),
      vaultAdmin: getNextAccount(),
      jitoVaultProgram: getNextAccount(),
    },
    data: getSetMintBurnAdminInstructionDataDecoder().decode(instruction.data),
  };
}
