/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddToWhitelistInstruction,
  type ParsedBurnWithdrawalTicketInstruction,
  type ParsedCloseWhitelistInstruction,
  type ParsedEnqueueWithdrawalInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeWhitelistInstruction,
  type ParsedMintInstruction,
  type ParsedRemoveFromWhitelistInstruction,
  type ParsedSetMintBurnAdminInstruction,
} from '../instructions';

export const JITO_VAULT_WHITELIST_PROGRAM_ADDRESS =
  '7BHULFc6NKwtc7f2ap6y7ty1cRfTN5MBMfJQj1rxEUhP' as Address<'7BHULFc6NKwtc7f2ap6y7ty1cRfTN5MBMfJQj1rxEUhP'>;

export enum JitoVaultWhitelistAccount {
  Config,
  Whitelist,
  WhitelistUser,
}

export enum JitoVaultWhitelistInstruction {
  InitializeConfig,
  InitializeWhitelist,
  SetMintBurnAdmin,
  AddToWhitelist,
  RemoveFromWhitelist,
  Mint,
  EnqueueWithdrawal,
  BurnWithdrawalTicket,
  CloseWhitelist,
}

export function identifyJitoVaultWhitelistInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): JitoVaultWhitelistInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return JitoVaultWhitelistInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return JitoVaultWhitelistInstruction.InitializeWhitelist;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return JitoVaultWhitelistInstruction.SetMintBurnAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return JitoVaultWhitelistInstruction.AddToWhitelist;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return JitoVaultWhitelistInstruction.RemoveFromWhitelist;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return JitoVaultWhitelistInstruction.Mint;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return JitoVaultWhitelistInstruction.EnqueueWithdrawal;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return JitoVaultWhitelistInstruction.BurnWithdrawalTicket;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return JitoVaultWhitelistInstruction.CloseWhitelist;
  }
  throw new Error(
    'The provided instruction could not be identified as a jitoVaultWhitelist instruction.'
  );
}

export type ParsedJitoVaultWhitelistInstruction<
  TProgram extends string = '7BHULFc6NKwtc7f2ap6y7ty1cRfTN5MBMfJQj1rxEUhP',
> =
  | ({
      instructionType: JitoVaultWhitelistInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.InitializeWhitelist;
    } & ParsedInitializeWhitelistInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.SetMintBurnAdmin;
    } & ParsedSetMintBurnAdminInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.AddToWhitelist;
    } & ParsedAddToWhitelistInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.RemoveFromWhitelist;
    } & ParsedRemoveFromWhitelistInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.Mint;
    } & ParsedMintInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.EnqueueWithdrawal;
    } & ParsedEnqueueWithdrawalInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.BurnWithdrawalTicket;
    } & ParsedBurnWithdrawalTicketInstruction<TProgram>)
  | ({
      instructionType: JitoVaultWhitelistInstruction.CloseWhitelist;
    } & ParsedCloseWhitelistInstruction<TProgram>);
