/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { JITO_VAULT_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_DISCRIMINATOR = 5;

export function getMintDiscriminatorBytes() {
  return getU8Encoder().encode(MINT_DISCRIMINATOR);
}

export type MintInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVaultConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVrtMint extends string | IAccountMeta<string> = string,
  TAccountDepositor extends string | IAccountMeta<string> = string,
  TAccountDepositorTokenAccount extends string | IAccountMeta<string> = string,
  TAccountVaultTokenAccount extends string | IAccountMeta<string> = string,
  TAccountDepositorVrtTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountVaultFeeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountWhitelistUser extends string | IAccountMeta<string> = string,
  TAccountJitoVaultProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVaultConfig extends string
        ? WritableAccount<TAccountVaultConfig>
        : TAccountVaultConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVrtMint extends string
        ? WritableAccount<TAccountVrtMint>
        : TAccountVrtMint,
      TAccountDepositor extends string
        ? WritableSignerAccount<TAccountDepositor> &
            IAccountSignerMeta<TAccountDepositor>
        : TAccountDepositor,
      TAccountDepositorTokenAccount extends string
        ? WritableAccount<TAccountDepositorTokenAccount>
        : TAccountDepositorTokenAccount,
      TAccountVaultTokenAccount extends string
        ? WritableAccount<TAccountVaultTokenAccount>
        : TAccountVaultTokenAccount,
      TAccountDepositorVrtTokenAccount extends string
        ? WritableAccount<TAccountDepositorVrtTokenAccount>
        : TAccountDepositorVrtTokenAccount,
      TAccountVaultFeeTokenAccount extends string
        ? WritableAccount<TAccountVaultFeeTokenAccount>
        : TAccountVaultFeeTokenAccount,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountWhitelistUser extends string
        ? ReadonlyAccount<TAccountWhitelistUser>
        : TAccountWhitelistUser,
      TAccountJitoVaultProgram extends string
        ? ReadonlyAccount<TAccountJitoVaultProgram>
        : TAccountJitoVaultProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintInstructionData = {
  discriminator: number;
  amountIn: bigint;
  minAmountOut: bigint;
};

export type MintInstructionDataArgs = {
  amountIn: number | bigint;
  minAmountOut: number | bigint;
};

export function getMintInstructionDataEncoder(): Encoder<MintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_DISCRIMINATOR })
  );
}

export function getMintInstructionDataDecoder(): Decoder<MintInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
  ]);
}

export function getMintInstructionDataCodec(): Codec<
  MintInstructionDataArgs,
  MintInstructionData
> {
  return combineCodec(
    getMintInstructionDataEncoder(),
    getMintInstructionDataDecoder()
  );
}

export type MintInput<
  TAccountConfig extends string = string,
  TAccountVaultConfig extends string = string,
  TAccountVault extends string = string,
  TAccountVrtMint extends string = string,
  TAccountDepositor extends string = string,
  TAccountDepositorTokenAccount extends string = string,
  TAccountVaultTokenAccount extends string = string,
  TAccountDepositorVrtTokenAccount extends string = string,
  TAccountVaultFeeTokenAccount extends string = string,
  TAccountWhitelist extends string = string,
  TAccountWhitelistUser extends string = string,
  TAccountJitoVaultProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  vaultConfig: Address<TAccountVaultConfig>;
  vault: Address<TAccountVault>;
  vrtMint: Address<TAccountVrtMint>;
  depositor: TransactionSigner<TAccountDepositor>;
  depositorTokenAccount: Address<TAccountDepositorTokenAccount>;
  vaultTokenAccount: Address<TAccountVaultTokenAccount>;
  depositorVrtTokenAccount: Address<TAccountDepositorVrtTokenAccount>;
  vaultFeeTokenAccount: Address<TAccountVaultFeeTokenAccount>;
  whitelist: Address<TAccountWhitelist>;
  whitelistUser: Address<TAccountWhitelistUser>;
  jitoVaultProgram: Address<TAccountJitoVaultProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amountIn: MintInstructionDataArgs['amountIn'];
  minAmountOut: MintInstructionDataArgs['minAmountOut'];
};

export function getMintInstruction<
  TAccountConfig extends string,
  TAccountVaultConfig extends string,
  TAccountVault extends string,
  TAccountVrtMint extends string,
  TAccountDepositor extends string,
  TAccountDepositorTokenAccount extends string,
  TAccountVaultTokenAccount extends string,
  TAccountDepositorVrtTokenAccount extends string,
  TAccountVaultFeeTokenAccount extends string,
  TAccountWhitelist extends string,
  TAccountWhitelistUser extends string,
  TAccountJitoVaultProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
>(
  input: MintInput<
    TAccountConfig,
    TAccountVaultConfig,
    TAccountVault,
    TAccountVrtMint,
    TAccountDepositor,
    TAccountDepositorTokenAccount,
    TAccountVaultTokenAccount,
    TAccountDepositorVrtTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountWhitelist,
    TAccountWhitelistUser,
    TAccountJitoVaultProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountVaultConfig,
  TAccountVault,
  TAccountVrtMint,
  TAccountDepositor,
  TAccountDepositorTokenAccount,
  TAccountVaultTokenAccount,
  TAccountDepositorVrtTokenAccount,
  TAccountVaultFeeTokenAccount,
  TAccountWhitelist,
  TAccountWhitelistUser,
  TAccountJitoVaultProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_VAULT_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    vaultConfig: { value: input.vaultConfig ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    vrtMint: { value: input.vrtMint ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
    depositorTokenAccount: {
      value: input.depositorTokenAccount ?? null,
      isWritable: true,
    },
    vaultTokenAccount: {
      value: input.vaultTokenAccount ?? null,
      isWritable: true,
    },
    depositorVrtTokenAccount: {
      value: input.depositorVrtTokenAccount ?? null,
      isWritable: true,
    },
    vaultFeeTokenAccount: {
      value: input.vaultFeeTokenAccount ?? null,
      isWritable: true,
    },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    whitelistUser: { value: input.whitelistUser ?? null, isWritable: false },
    jitoVaultProgram: {
      value: input.jitoVaultProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vaultConfig),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vrtMint),
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.depositorTokenAccount),
      getAccountMeta(accounts.vaultTokenAccount),
      getAccountMeta(accounts.depositorVrtTokenAccount),
      getAccountMeta(accounts.vaultFeeTokenAccount),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.whitelistUser),
      getAccountMeta(accounts.jitoVaultProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getMintInstructionDataEncoder().encode(
      args as MintInstructionDataArgs
    ),
  } as MintInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountVaultConfig,
    TAccountVault,
    TAccountVrtMint,
    TAccountDepositor,
    TAccountDepositorTokenAccount,
    TAccountVaultTokenAccount,
    TAccountDepositorVrtTokenAccount,
    TAccountVaultFeeTokenAccount,
    TAccountWhitelist,
    TAccountWhitelistUser,
    TAccountJitoVaultProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedMintInstruction<
  TProgram extends string = typeof JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    vaultConfig: TAccountMetas[1];
    vault: TAccountMetas[2];
    vrtMint: TAccountMetas[3];
    depositor: TAccountMetas[4];
    depositorTokenAccount: TAccountMetas[5];
    vaultTokenAccount: TAccountMetas[6];
    depositorVrtTokenAccount: TAccountMetas[7];
    vaultFeeTokenAccount: TAccountMetas[8];
    whitelist: TAccountMetas[9];
    whitelistUser: TAccountMetas[10];
    jitoVaultProgram: TAccountMetas[11];
    tokenProgram: TAccountMetas[12];
  };
  data: MintInstructionData;
};

export function parseMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vaultConfig: getNextAccount(),
      vault: getNextAccount(),
      vrtMint: getNextAccount(),
      depositor: getNextAccount(),
      depositorTokenAccount: getNextAccount(),
      vaultTokenAccount: getNextAccount(),
      depositorVrtTokenAccount: getNextAccount(),
      vaultFeeTokenAccount: getNextAccount(),
      whitelist: getNextAccount(),
      whitelistUser: getNextAccount(),
      jitoVaultProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getMintInstructionDataDecoder().decode(instruction.data),
  };
}
