/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { JITO_VAULT_WHITELIST_PROGRAM_ADDRESS } from '../programs';

/** ArithmeticOverflow: ArithmeticOverflow */
export const JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_OVERFLOW = 0xbb8; // 3000
/** ArithmeticUnderflow: ArithmeticUnderflow */
export const JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_UNDERFLOW = 0xbb9; // 3001
/** DivisionByZero: DivisionByZero */
export const JITO_VAULT_WHITELIST_ERROR__DIVISION_BY_ZERO = 0xbba; // 3002
/** InvalidVault: InvalidVault */
export const JITO_VAULT_WHITELIST_ERROR__INVALID_VAULT = 0xbbb; // 3003
/** InvalidWhitelist: InvalidWhitelist */
export const JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST = 0xbbc; // 3004
/** InvalidWhitelistUser: InvalidWhitelistUser */
export const JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST_USER = 0xbbd; // 3005

export type JitoVaultWhitelistError =
  | typeof JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_OVERFLOW
  | typeof JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_UNDERFLOW
  | typeof JITO_VAULT_WHITELIST_ERROR__DIVISION_BY_ZERO
  | typeof JITO_VAULT_WHITELIST_ERROR__INVALID_VAULT
  | typeof JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST
  | typeof JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST_USER;

let jitoVaultWhitelistErrorMessages:
  | Record<JitoVaultWhitelistError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  jitoVaultWhitelistErrorMessages = {
    [JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_OVERFLOW]: `ArithmeticOverflow`,
    [JITO_VAULT_WHITELIST_ERROR__ARITHMETIC_UNDERFLOW]: `ArithmeticUnderflow`,
    [JITO_VAULT_WHITELIST_ERROR__DIVISION_BY_ZERO]: `DivisionByZero`,
    [JITO_VAULT_WHITELIST_ERROR__INVALID_VAULT]: `InvalidVault`,
    [JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST]: `InvalidWhitelist`,
    [JITO_VAULT_WHITELIST_ERROR__INVALID_WHITELIST_USER]: `InvalidWhitelistUser`,
  };
}

export function getJitoVaultWhitelistErrorMessage(
  code: JitoVaultWhitelistError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      jitoVaultWhitelistErrorMessages as Record<JitoVaultWhitelistError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isJitoVaultWhitelistError<
  TProgramErrorCode extends JitoVaultWhitelistError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    JITO_VAULT_WHITELIST_PROGRAM_ADDRESS,
    code
  );
}
